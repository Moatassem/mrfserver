package rtp

import (
	"fmt"

	"github.com/gotranspile/g722"
	// "github.com/gotranspile/g722"
	// "github.com/xlab/opus-go/opus"
)

const (
	PCMU byte = 0
	PCMA byte = 8
	G722 byte = 9
)

var codecSilence = map[byte]byte{PCMU: 255, PCMA: 213, G722: 85}

// G.711 A-law to mu-law conversion table
var a2u = [256]byte{
	0x80, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E,
	0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E,
	0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE,
	0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE,
	0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE,
	0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE,
	0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE,
	0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE,
	0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
	0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E,
	0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E,
	0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E,
	0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E,
	0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E,
	0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E,
	0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E,
}

// G.711 mu-law to A-law conversion table
var u2a = [256]byte{
	0x80, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E,
	0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E,
	0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE,
	0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE,
	0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE,
	0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE,
	0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE,
	0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE,
	0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
	0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E,
	0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E,
	0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E,
	0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E,
	0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E,
	0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E,
	0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E,
}

var TranscodingEngine TXEngine

type TXEngine struct {
	// OpusEncoder *opus.Encoder
	// OpusDecoder *opus.Decoder

	G722Encoder *g722.Encoder
	G722Decoder *g722.Decoder
}

// G711ALawToMuLaw transcodes G.711 A-law to mu-law
func G711ALawToMuLaw(input []byte) []byte {
	output := make([]byte, len(input))
	for i, b := range input {
		output[i] = a2u[b]
	}
	return output
}

// G711MuLawToALaw transcodes G.711 mu-law to A-law
func G711MuLawToALaw(input []byte) []byte {
	output := make([]byte, len(input))
	for i, b := range input {
		output[i] = u2a[b]
	}
	return output
}

// G711ToG722 transcodes G.711 (A-law or mu-law) to G.722
func G711ToG722(input []byte, isALaw bool) ([]byte, error) {
	// Decode G.711 to PCM
	pcm := make([]int16, len(input))
	for i, b := range input {
		if isALaw {
			pcm[i] = alaw2PCM(b)
		} else {
			pcm[i] = mulaw2PCM(b)
		}
	}

	// Encode PCM to G.722
	return PCM2G722(pcm), nil
}

// G722ToG711 transcodes G.722 to G.711 (A-law or mu-law)
func G722ToG711(input []byte, isALaw bool) ([]byte, error) {
	// Decode G.722 to PCM
	pcm := make([]int16, len(input))
	n := TranscodingEngine.G722Decoder.Decode(pcm, input)
	if n == 0 {
		return nil, fmt.Errorf("Failed to decode G.722 data")
	}

	// Encode PCM to G.711
	var output []byte
	if isALaw {
		output = PCM2G711A(pcm)
	} else {
		output = PCM2G711U(pcm)
	}
	return output, nil
}

func TxPCMnSilence(pcm []int16, pt byte) ([]byte, byte) {
	switch pt {
	case PCMU:
		return PCM2G711U(pcm), codecSilence[pt]
	case PCMA:
		return PCM2G711A(pcm), codecSilence[pt]
	case G722:
		return PCM2G722(pcm), codecSilence[pt]
	default:
		return nil, 0
	}
}

func PCM2G722(pcm []int16) []byte {
	g722 := make([]byte, len(pcm))
	n := TranscodingEngine.G722Encoder.Encode(g722, pcm)
	if n == 0 {
		fmt.Println(fmt.Errorf("Failed to encode G.722 data"))
		return nil
	}
	return g722
}

func PCM2G711A1(pcmBytes []int16) []byte {
	output := make([]byte, len(pcmBytes))
	for i, sample := range pcmBytes {
		output[i] = pcm2ALaw(sample)
	}
	return output
}

func PCM2G711U1(pcmBytes []int16) []byte {
	output := make([]byte, len(pcmBytes))
	for i, sample := range pcmBytes {
		output[i] = pcm2MuLaw(sample)
	}
	return output
}

// pcm2ALaw converts PCM to G.711 A-law
func pcm2ALaw(sample int16) byte {
	// Handle the sign
	var sign byte
	if sample < 0 {
		sign = 0x80
		sample = -sample
	}

	// Clamp the sample to the valid range
	if sample > 0x7FFF {
		sample = 0x7FFF
	}

	// Find the segment and quantize the sample
	var segment byte
	if sample >= 0x100 {
		segment = 7
		for i := 0x1000; i > 0x100; i >>= 1 {
			if sample >= int16(i) {
				break
			}
			segment--
		}
	}

	// Calculate the mantissa
	mantissa := byte((sample >> (segment + 3)) & 0x0F)

	// Combine sign, segment, and mantissa
	alaw := sign | (segment << 4) | mantissa

	// XOR with 0x55 to invert every other bit
	alaw ^= 0x55

	return alaw
}

// pcm2MuLaw converts PCM to G.711 mu-law
func pcm2MuLaw(sample int16) byte {
	// Handle the sign
	var sign byte
	if sample < 0 {
		sign = 0x80
		sample = -sample
	}

	// Add bias for quantization
	sample += 0x84

	// Clamp the sample to the valid range
	if sample > 0x7FFF {
		sample = 0x7FFF
	}

	// Find the segment and quantize the sample
	var segment byte
	if sample >= 0x1000 {
		segment = 7
		for i := 0x1000; i > 0x100; i >>= 1 {
			if sample >= int16(i) {
				break
			}
			segment--
		}
	}

	// Calculate the mantissa
	mantissa := byte((sample >> (segment + 3)) & 0x0F)

	// Combine sign, segment, and mantissa
	ulaw := sign | (segment << 4) | mantissa

	// XOR with 0xFF to invert all bits
	ulaw ^= 0xFF

	return ulaw
}

// alaw2PCM converts G.711 A-law to PCM
func alaw2PCM(b byte) int16 {
	// XOR with 0x55 to invert every other bit
	b ^= 0x55

	// Extract the sign and magnitude
	sign := (b & 0x80) >> 7
	exponent := (b & 0x70) >> 4
	mantissa := b & 0x0F

	// Calculate the linear PCM value
	var pcm int16
	if exponent == 0 {
		pcm = int16(mantissa << 4)
	} else {
		pcm = int16((mantissa | 0x10) << (exponent + 3))
	}

	// Apply the sign
	if sign == 0 {
		pcm = -pcm
	}

	return pcm
}

// mulaw2PCM converts G.711 mu-law to PCM
func mulaw2PCM(b byte) int16 {
	// XOR with 0xFF to invert all bits
	b ^= 0xFF

	// Extract the sign, exponent, and mantissa
	sign := (b & 0x80) >> 7
	exponent := (b & 0x70) >> 4
	mantissa := b & 0x0F

	// Calculate the linear PCM value
	var pcm int16
	pcm = int16((0x21 << exponent) | (mantissa << (exponent + 3)))

	// Apply the sign
	if sign == 0 {
		pcm = -pcm
	}

	return pcm
}

// const (
// 	sampleRate = 48000 // Opus supports 8k, 12k, 16k, 24k, and 48k
// 	channels   = 1     // Mono audio
// 	bitrate    = 64000 // 64kbps
// 	frameSize  = 960   // 20ms at 48kHz
// )

// func encodePCM(pcm []int16) ([]byte, error) {
// 	encoder := opus.NewEncoder()
// 	// encoder := opus.NewEncoder(48000, 2, opus.APP_AUDIO)
// 	// if err != nil {
// 	// 	log.Fatal(err)
// 	// }

// 	// err = encoder.SetBitrate(bitrate)
// 	// if err != nil {
// 	// 	return nil, err
// 	// }

// 	// // Encode PCM samples into Opus
// 	// opusData := make([]byte, 4000)
// 	// n, err := encoder.Encode(pcm, opusData)
// 	// if err != nil {
// 	// 	return nil, err
// 	// }

// 	return opusData[:n], nil
// }

// func decodeOpus(opusData []byte) ([]int16, error) {
// 	decoder, err := opus.NewDecoder(48000, 2)
// 	if err != nil {
// 		return nil, err
// 	}

// 	// Decode Opus data into PCM samples
// 	pcm := make([]int16, 5760)
// 	n, err := decoder.Decode(opusData, pcm)
// 	if err != nil {
// 		return nil, err
// 	}

// 	return pcm[:n], nil
// }

func InitializeTX() {
	// var err error
	// sampleRate := 48000 // Opus supports 8, 12, 16, 24, or 48 kHz
	// channels := 1       // 1 for mono, 2 for stereo
	// TranscodingEngine.OpusEncoder, err = opus.NewEncoder(sampleRate, channels)
	// if err != nil {
	// 	log.Fatal("Failed to create Opus encoder:", err)
	// }

	// pcm := []int16{0, 100, 200, 300, 400} // Example PCM audio data
	// data := make([]byte, 1000)            // Buffer for encoded data
	// n, err := TranscodingEngine.OpusEncoder.Encode(pcm, data)
	// if err != nil {
	// 	log.Fatal("Failed to encode PCM data:", err)
	// }
	// log.Println("Encoded Opus data:", data[:n])

	// // Create an Opus decoder
	// TranscodingEngine.OpusDecoder, err = opus.NewDecoder(sampleRate, channels)
	// if err != nil {
	// 	log.Fatal("Failed to create Opus decoder:", err)
	// }

	// decoded := make([]int16, len(pcm))
	// n, err = TranscodingEngine.OpusDecoder.Decode(data[:n], decoded)
	// if err != nil {
	// 	log.Fatal("Failed to decode Opus data:", err)
	// }
	// log.Println("Decoded PCM data:", decoded[:n])

	// Create a G.722 encoder
	g722rate := 64000
	var g722flag g722.Flags = g722.FlagSampleRate8000
	TranscodingEngine.G722Encoder = g722.NewEncoder(g722rate, g722flag)
	// _ := TranscodingEngine.G722Encoder.Encode(g722, pcm)
	// log.Println("Encoded G.722 data:", encoded)

	// Create a G.722 decoder
	TranscodingEngine.G722Decoder = g722.NewDecoder(g722rate, g722flag)
	// _ := TranscodingEngine.G722Decoder.Decode(pcm,g722)
	// log.Println("Decoded PCM data:", decoded)
}
